swagger: "2.0"
info:
  description: "This is an api for looking up movies"
  version: "1.0.0"
  title: "rex-movies"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "lachlan.krautz@gmail.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost"
basePath: "/api"
tags:
- name: "movie"
  description: "Movie listings"
schemes:
- "http"
paths:

  /movie:
    post:
      tags:
      - "movie"
      summary: "Add a new movie listing"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object to add"
        required: true
        schema:
          $ref: "#/definitions/movie"
      responses:
        405:
          description: "Invalid input"
        401:
          description: "Unauthorized"
    put:
      tags:
      - "movie"
      summary: "Update an existing movie"
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object to add"
        required: true
        schema:
          $ref: "#/definitions/movie"
      responses:
        404:
          description: "Movie not found"
        405:
          description: "Invalid input"
  /movie:
    get:
      tags:
      - "movie"
      summary: "List all movies"
      description: "Displays all movie data"
      operationId: "getMovieList"
      produces:
      - "application/json"
      parameters:
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/movie"
        404:
          description: "Movie not found"
  /movie/{movieId}:
    get:
      tags:
      - "movie"
      summary: "Find movie by ID"
      description: "Returns a single movie"
      operationId: "getMovieById"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/movie"
    delete:
      tags:
      - "movie"
      summary: "Deletes a movie"
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/json"
      parameters:
      - name: "api_token"
        in: "get"
        required: true
        type: "string"
      - name: "movieId"
        in: "path"
        description: "Movie id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
        
securityDefinitions:
  movies_auth:
    type: "token"
    authorizationUrl: "http://localhost/api/token"
    flow: "implicit"
    scopes:
      write:movies: "add edit and delete movies"
      read:movies: "list and lookup movies"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      movieId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  movie:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "movie status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "movie"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"